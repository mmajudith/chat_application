{"version":3,"sources":["components/LoginForm.jsx","components/MessagesForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","event","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","e","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecc2a769.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { useState } from 'react'\r\n\r\nconst LoginForm = ()=>{\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    const handleSubmit = async (event) =>{\r\n        event.preventDefault();\r\n\r\n        const authObject = { 'Project-ID': \"00dfaecc-7883-44fb-92e0-84fe9e591e5c\", 'User-Name': username, 'User-Secret': password}\r\n\r\n        try{\r\n            await axios.get('https://api.chatengine.io/chats', { headers: authObject})\r\n\r\n            localStorage.setItem('username', username)\r\n            localStorage.setItem('password', password)\r\n\r\n            window.location.reload()\r\n        }catch(error){\r\n            setError('Sorry, incorrect credential.')\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div className=\"wrapper\">\r\n            <div className=\"form\">\r\n                <h1 className=\"title\">React Group Chat App</h1>\r\n                <form onSubmit={handleSubmit}>\r\n                    <input \r\n                        type=\"text\"\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                        className=\"input\"\r\n                        placeholder=\"username\"\r\n                        required\r\n                    />\r\n                    <input \r\n                        type=\"password\"\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                        className=\"input\"\r\n                        placeholder=\"password\"\r\n                        required\r\n                    />\r\n                    <div align=\"center\">\r\n                        <button type=\"submit\" className=\"button\">\r\n                            <span>Start Chatting</span>\r\n                        </button>\r\n                    </div>\r\n                    <h2 className=\"error\">{error}</h2>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import { useState } from \"react\";\r\nimport { sendMessage, isTyping } from 'react-chat-engine'\r\nimport { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\n\r\nconst MessageForm = (props)=>{\r\n\r\n    const [value, setValue] = useState(\"\")\r\n    const { chatId, creds } = props\r\n\r\n    const handleSubmit = (event)=>{\r\n        event.preventDefault();\r\n\r\n        const text = value.trim();\r\n\r\n        if(text.length > 0) sendMessage(creds, chatId, { text })\r\n\r\n        setValue(\"\");\r\n\r\n    }\r\n\r\n    const handleUpload = (event)=>{\r\n        sendMessage(props, chatId, { files: event.target.files, text: ''})\r\n    }\r\n\r\n    const handleChange = (event)=>{\r\n\r\n        setValue(event.target.value);\r\n        isTyping(props, chatId);\r\n\r\n    }\r\n\r\n    return(\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input \r\n                className=\"message-input\"\r\n                value={value}\r\n                placeholder=\"Send a message...\"\r\n                onChange={handleChange}\r\n                onSubmit={handleSubmit}\r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n                <span className=\"image-button\">\r\n                    <PictureOutlined  className=\"picture-icon\"/>\r\n                </span>\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple={false}\r\n                id=\"upload-button\"\r\n                style={{display: 'none'}}\r\n                onChange={handleUpload}\r\n            />\r\n            <button type=\"submit\" className=\"send-button\">\r\n                <SendOutlined className=\"send-icons\"/>\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default MessageForm;","const MyMessage = ({message})=>{\r\n    if(message?.attachments?.length > 0 ){\r\n        return (\r\n            <img \r\n                src={message.attachments[0].file}\r\n                alt=\"message attachment\"\r\n                className=\"message-image\"\r\n                style={{ float: 'right'}}\r\n            />\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\r\n            {message.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMessage;","const TheirMessage = ({lastMessage, message})=>{\r\n\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n    return(\r\n        <div className=\"message-row\">\r\n            {\r\n                isFirstMessageByUser && (\r\n                    <div \r\n                        className=\"message-avatar\"\r\n                        style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                    />\r\n                )\r\n            }\r\n\r\n            {\r\n                message?.attachments?.length > 0 ?\r\n                    (\r\n                        <img \r\n                            src={message.attachments[0].file}\r\n                            alt=\"message attachment\"\r\n                            className=\"message-image\"\r\n                            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px'}}\r\n                        />\r\n                    ) : (\r\n                        <div className=\"message\" style={{float: 'left', backgroundColor: '#CABCDC',  marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\r\n                            {message.text}\r\n                        </div>\r\n                    )\r\n                \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TheirMessage;","import MessageForm from './MessagesForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\n\r\nconst ChatFeed = (props)=>{\r\n\r\n    const { chats, activeChat, userName, messages } = props;\r\n\r\n    const chat = chats && chats[activeChat]\r\n\r\n    const renderReadReceipts = (message, isMyMessage)=>{\r\n        return chat.people.map((person, index) => person.last_read === message.id && (\r\n            <div \r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float: isMyMessage ? 'right' : 'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n            />\r\n        ))\r\n    }\r\n\r\n    const renderMessages = ()=>{\r\n        const keys = Object.keys(messages)\r\n\r\n        return keys.map((key, index)=>{\r\n            const message = messages[key];\r\n            const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n            const isMyMessage = userName === message.sender.username;\r\n\r\n            return (\r\n                <div key={`msg_${index}`} style={{width: '100%'}}>\r\n\r\n                    <div className=\"message-block\">\r\n\r\n                        {\r\n                            isMyMessage \r\n                            ? <MyMessage message={message}/> \r\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\r\n                        {\r\n                            renderReadReceipts(message, isMyMessage)\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    if(!chat) return 'Loading...';\r\n\r\n    return(\r\n        <div className=\"chat-feed\">\r\n            <div className=\"chat-title-container\">\r\n                <div className=\"chat-title\">\r\n                    {chat.title}\r\n                </div>\r\n                <div className=\"sub-title\">\r\n                    {\r\n                        chat.people.map(person => ` ${person.person.username}`)\r\n                    }\r\n                </div>\r\n                {\r\n                    renderMessages()\r\n                }\r\n                <div style={{height: '100px'}}/>\r\n                <div className=\"message-form-container\">\r\n                    <MessageForm {...props} chatId={activeChat}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatFeed;","import { ChatEngine } from 'react-chat-engine';\r\nimport LoginForm  from './components/LoginForm';\r\nimport  ChatFeed  from './components/ChatFeed'\r\n\r\nimport './App.css'\r\n\r\nconst App = ()=>{\r\n\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n\r\n    return(\r\n\r\n        <ChatEngine \r\n            height=\"100vh\"\r\n            projectID=\"00dfaecc-7883-44fb-92e0-84fe9e591e5c\"\r\n            userName={localStorage.getItem('username')}\r\n            userSecret={localStorage.getItem('password')}\r\n            renderChatFeed={(chatAppState)=> <ChatFeed {...chatAppState}/>}\r\n        />\r\n\r\n    )\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}